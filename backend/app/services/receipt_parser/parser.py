from PIL import Image
from dotenv import load_dotenv
import easyocr
from google import genai
from fastapi import UploadFile
import numpy as np
import cv2

load_dotenv()

class ReceiptParser:
    
    
    def __init__(self, file: UploadFile):
        self.reader = easyocr.Reader(['en'])
        self.model = genai.Client()
        self.file = file

    def extract_text(self):
        # Read file contents into bytes
        contents = self.file.file.read()

        # Convert to numpy array
        np_img = np.frombuffer(contents, np.uint8)
        image = cv2.imdecode(np_img, cv2.IMREAD_COLOR)

        # Pass image to EasyOCR
        results = self.reader.readtext(image)

        # Extract just the text part
        raw_text = " ".join([text for (_, text, _) in results])
        return raw_text

    def extracted_to_json(self):
        text = self.extract_text()

        prompt = f"""
        Extract structured JSON from this receipt text:
        {text}

        JSON format:
        {{
          "vendor": "...",
          "date": "...",
          "items": [
            {{"name": "...", "price": ..., "category": "..."}}
          ],
          "total": ...
        }}
        """

        response = self.model.models.generate_content(
            model="gemini-2.5-flash", 
            contents=prompt,
        )

        return response.text



from fastapi import UploadFile
import easyocr
from google import genai
import numpy as np
import cv2

class ReceiptParser:
    """
    A utility class for parsing receipts using EasyOCR and extracting structured data with Gemini AI.

    This class:
      - Takes an uploaded image file (FastAPI's UploadFile).
      - Uses EasyOCR to extract raw text from the receipt image.
      - Passes the extracted text to Gemini for JSON-based structured parsing.
      - Read File content to bytes -> Convert bytes to numpy array -> Decode image with OpenCV -> Perform OCR with EasyOCR -> Extract text -> Create prompt for Gemini -> Get structured JSON response.
    """

    def __init__(self, file: UploadFile):
        """
        Initialize the ReceiptParser.

        Args:
            file (UploadFile): The uploaded image file representing a receipt.
        """
        self.reader = easyocr.Reader(['en'])
        self.model = genai.Client()
        self.file = file

    def extract_text(self) -> str:
      
        contents = self.file.file.read()

       
        np_img = np.frombuffer(contents, np.uint8)
        image = cv2.imdecode(np_img, cv2.IMREAD_COLOR)

      
        results = self.reader.readtext(image)

        raw_text = " ".join([text for (_, text, _) in results])
        return raw_text

    def extracted_to_json(self) -> str:
        """
        Extract text from the receipt and convert it into structured JSON format using Gemini.

        The JSON contains:
            - vendor
            - date
            - list of items (with name, price, category)
            - total

        Returns:
            str: The structured JSON response generated by Gemini.
        """
        text = self.extract_text()

        prompt = f"""
        Extract structured JSON from this receipt text:
        {text}

        JSON format:
        {{
          "vendor": "...",
          "date": "...",
          "items": [
            {{"name": "...", "price": ..., "category": "..."}}
          ],
          "total": ...
        }}
        """

        response = self.model.models.generate_content(
            model="gemini-2.5-flash", 
            contents=prompt,
        )

        return response.text
